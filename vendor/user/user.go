// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Activity int64
const (
  Activity_ONLINE Activity = 1
  Activity_OFFLINE Activity = 2
)

func (p Activity) String() string {
  switch p {
  case Activity_ONLINE: return "ONLINE"
  case Activity_OFFLINE: return "OFFLINE"
  }
  return "<UNSET>"
}

func ActivityFromString(s string) (Activity, error) {
  switch s {
  case "ONLINE": return Activity_ONLINE, nil 
  case "OFFLINE": return Activity_OFFLINE, nil 
  }
  return Activity(0), fmt.Errorf("not a valid Activity string")
}


func ActivityPtr(v Activity) *Activity { return &v }

func (p Activity) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Activity) UnmarshalText(text []byte) error {
q, err := ActivityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Activity) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Activity(v)
return nil
}

func (p * Activity) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Activity
//  - Timestamp
//  - Userid
type ActivityEvent struct {
  Activity Activity `thrift:"activity,1" db:"activity" json:"activity"`
  Timestamp int64 `thrift:"timestamp,2" db:"timestamp" json:"timestamp"`
  Userid int64 `thrift:"userid,3" db:"userid" json:"userid"`
}

func NewActivityEvent() *ActivityEvent {
  return &ActivityEvent{}
}


func (p *ActivityEvent) GetActivity() Activity {
  return p.Activity
}

func (p *ActivityEvent) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *ActivityEvent) GetUserid() int64 {
  return p.Userid
}
func (p *ActivityEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Activity(v)
  p.Activity = temp
}
  return nil
}

func (p *ActivityEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ActivityEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *ActivityEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("activity", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:activity: ", p), err) }
  if err := oprot.WriteI32(int32(p.Activity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.activity (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:activity: ", p), err) }
  return err
}

func (p *ActivityEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  return err
}

func (p *ActivityEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *ActivityEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityEvent(%+v)", *p)
}

type UserActivity interface {
  // Parameters:
  //  - Userid
  //  - Ev
  Online(ctx context.Context, userid int64, ev *ActivityEvent) (err error)
  // Parameters:
  //  - Userid
  //  - Ev
  Offline(ctx context.Context, userid int64, ev *ActivityEvent) (err error)
}

type UserActivityClient struct {
  c thrift.TClient
}

// Deprecated: Use NewUserActivity instead
func NewUserActivityClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserActivityClient {
  return &UserActivityClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewUserActivity instead
func NewUserActivityClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserActivityClient {
  return &UserActivityClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserActivityClient(c thrift.TClient) *UserActivityClient {
  return &UserActivityClient{
    c: c,
  }
}

// Parameters:
//  - Userid
//  - Ev
func (p *UserActivityClient) Online(ctx context.Context, userid int64, ev *ActivityEvent) (err error) {
  var _args0 UserActivityOnlineArgs
  _args0.Userid = userid
  _args0.Ev = ev
  var _result1 UserActivityOnlineResult
  if err = p.c.Call(ctx, "online", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Userid
//  - Ev
func (p *UserActivityClient) Offline(ctx context.Context, userid int64, ev *ActivityEvent) (err error) {
  var _args2 UserActivityOfflineArgs
  _args2.Userid = userid
  _args2.Ev = ev
  var _result3 UserActivityOfflineResult
  if err = p.c.Call(ctx, "offline", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

type UserActivityProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserActivity
}

func (p *UserActivityProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserActivityProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserActivityProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserActivityProcessor(handler UserActivity) *UserActivityProcessor {

  self4 := &UserActivityProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["online"] = &userActivityProcessorOnline{handler:handler}
  self4.processorMap["offline"] = &userActivityProcessorOffline{handler:handler}
return self4
}

func (p *UserActivityProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type userActivityProcessorOnline struct {
  handler UserActivity
}

func (p *userActivityProcessorOnline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserActivityOnlineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("online", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserActivityOnlineResult{}
  var err2 error
  if err2 = p.handler.Online(ctx, args.Userid, args.Ev); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing online: " + err2.Error())
    oprot.WriteMessageBegin("online", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("online", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userActivityProcessorOffline struct {
  handler UserActivity
}

func (p *userActivityProcessorOffline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserActivityOfflineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("offline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserActivityOfflineResult{}
  var err2 error
  if err2 = p.handler.Offline(ctx, args.Userid, args.Ev); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing offline: " + err2.Error())
    oprot.WriteMessageBegin("offline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("offline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Userid
//  - Ev
type UserActivityOnlineArgs struct {
  Userid int64 `thrift:"userid,1" db:"userid" json:"userid"`
  Ev *ActivityEvent `thrift:"ev,2" db:"ev" json:"ev"`
}

func NewUserActivityOnlineArgs() *UserActivityOnlineArgs {
  return &UserActivityOnlineArgs{}
}


func (p *UserActivityOnlineArgs) GetUserid() int64 {
  return p.Userid
}
var UserActivityOnlineArgs_Ev_DEFAULT *ActivityEvent
func (p *UserActivityOnlineArgs) GetEv() *ActivityEvent {
  if !p.IsSetEv() {
    return UserActivityOnlineArgs_Ev_DEFAULT
  }
return p.Ev
}
func (p *UserActivityOnlineArgs) IsSetEv() bool {
  return p.Ev != nil
}

func (p *UserActivityOnlineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserActivityOnlineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *UserActivityOnlineArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Ev = &ActivityEvent{}
  if err := p.Ev.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ev), err)
  }
  return nil
}

func (p *UserActivityOnlineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("online_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserActivityOnlineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userid: ", p), err) }
  return err
}

func (p *UserActivityOnlineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ev", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ev: ", p), err) }
  if err := p.Ev.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ev), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ev: ", p), err) }
  return err
}

func (p *UserActivityOnlineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserActivityOnlineArgs(%+v)", *p)
}

type UserActivityOnlineResult struct {
}

func NewUserActivityOnlineResult() *UserActivityOnlineResult {
  return &UserActivityOnlineResult{}
}

func (p *UserActivityOnlineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserActivityOnlineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("online_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserActivityOnlineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserActivityOnlineResult(%+v)", *p)
}

// Attributes:
//  - Userid
//  - Ev
type UserActivityOfflineArgs struct {
  Userid int64 `thrift:"userid,1" db:"userid" json:"userid"`
  Ev *ActivityEvent `thrift:"ev,2" db:"ev" json:"ev"`
}

func NewUserActivityOfflineArgs() *UserActivityOfflineArgs {
  return &UserActivityOfflineArgs{}
}


func (p *UserActivityOfflineArgs) GetUserid() int64 {
  return p.Userid
}
var UserActivityOfflineArgs_Ev_DEFAULT *ActivityEvent
func (p *UserActivityOfflineArgs) GetEv() *ActivityEvent {
  if !p.IsSetEv() {
    return UserActivityOfflineArgs_Ev_DEFAULT
  }
return p.Ev
}
func (p *UserActivityOfflineArgs) IsSetEv() bool {
  return p.Ev != nil
}

func (p *UserActivityOfflineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserActivityOfflineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *UserActivityOfflineArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Ev = &ActivityEvent{}
  if err := p.Ev.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ev), err)
  }
  return nil
}

func (p *UserActivityOfflineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("offline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserActivityOfflineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userid: ", p), err) }
  return err
}

func (p *UserActivityOfflineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ev", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ev: ", p), err) }
  if err := p.Ev.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ev), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ev: ", p), err) }
  return err
}

func (p *UserActivityOfflineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserActivityOfflineArgs(%+v)", *p)
}

type UserActivityOfflineResult struct {
}

func NewUserActivityOfflineResult() *UserActivityOfflineResult {
  return &UserActivityOfflineResult{}
}

func (p *UserActivityOfflineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserActivityOfflineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("offline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserActivityOfflineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserActivityOfflineResult(%+v)", *p)
}


